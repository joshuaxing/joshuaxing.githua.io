<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Express+Mongodb在Centos7.0下运行]]></title>
    <url>%2F2018%2F04%2F09%2FExpress%2BMongodb%E5%9C%A8Centos7.0%E4%B8%8B%E8%BF%90%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[VMware14和CentOs7.0的安装参考 服务器安装配置了解知识yum:是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器yum install: 安装rpm软件包yum remove: 删除指定的rpm软件包yum list: 显示软件包的信息yum search: 检查软件包的信息 安装ifconfig命令yum install net-tools.x86_64 安装包命令yum install XXX 关闭防火墙1234firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）systemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动init 6 #重启虚拟机，然后再输入第一条命令查看防火墙状态 Nginx Nginx文档翻译 Nginx 配置简述 Nginx基础 使用nginx配置nodejs服务进行反向代理修改nginx.conf 123456789101112131415161718192021upstream sample &#123; server 127.0.0.1:3000; keepalive 64; &#125; server &#123; listen 80; .... server_name 127.0.0.1; .... location / &#123; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_set_header Connection &quot;&quot;; proxy_http_version 1.1; proxy_pass http://sample; &#125; &#125; nginx -s reload重启]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NodeJS---mongodb的安装]]></title>
    <url>%2F2018%2F04%2F07%2FNodeJS---mongodb%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Linux下安装MongoDB的实现步骤安装配置mongodb /opt/mongodb/ mongodb安装位置 /opt/mongodb/bin mongodb命令目录 /var/mongodb/data 数据存放目录 /var/mongodb/logs/mongod.log 日志存放目录及文件 /var/mongodb/mongodb.conf mongodb启动配置文件 wget命令下载Node.js安装包wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.5.tgz 解压文件,并移动mongodb安装包 12tar zxvf mongodb-linux-x86_64-3.4.5.tgzmv /root/mongodb-linux-x86_64-3.4.5/* /opt/mongodb/ 创建数据和日志存放目录 12345mkdir /var/mongodbmkdir /var/mongodb/datamkdir /var/mongodb/logstouch /var/mongodb/logs/mongod.logtouch /var/mongodb/mongodb.conf 打开rc.local文件，添加CentOS开机启动项,让mongodb开机自启动 12# vim /etc/rc.d/rc.local/opt/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath=/var/mongodb/logs/mongod.log --fork --logappend 设置mongodb命令的环境变量 123#vi ~/.bash_profile //进入编辑export PATH=/opt/mongodb/bin:$PATH //文件添加内容#source ~/.bash_profile //文件生成 mongodb的启动 mongodb启动时，如果没有设置环境变量，则用./mongod 参数启动 12cd /opt/mongodb/binmongod --dbpath=/var/mongodb/data --logpath= /var/mongodb/logs/mongod.log --logappend 使用配置文件启动（/var/mongodb/mongodb.conf）配置文件 12345678910111213141516#启用日志文件，默认启用journal = true#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为falsequiet = false#日志文件位置logpath=/var/mongodb/logs/mongod.log#以追加方式写入日志logappend=true#是否以守护进程方式运行fork = false#默认27017port = 27017# 数据库文件位置dbpath = /var/mongodb/data/#启用定期记录CPU利用率和 I/O 等待cpu = true 启动 12cd /opt/mongodb/binmongod --config /var/mongodb/mongodb.conf 系统服务启动参考 配置防火墙开放端口27017 123# vi /etc/sysconfig/iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 27017 -j ACCEPT # service iptables restart 检查端口是否已被启动 123netstat -pan | grep 27017或netstat -nputl netstat: 打印Linux中网络系统的状态信息-n(numeric): 直接使用ip地址-p(programs): 显示正在使用Socket的程序识别码和程序名称-u(udp): 显示UDP传输协议的连线状况-t(tcp): 显示TCP传输协议的连线状况-l(listening): 显示监控中的服务器的Socket-a(all):显示所有连线中的Socketgrep: 强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。 查看mongodb进程ps aux | grep mongodbps: 用于报告当前系统的进程状态a: 显示现行终端机下的所有程序，包括其他用户的程序u: 以用户为主的格式来显示程序状况x: 显示所有程序，不以终端机来区分 关闭mongodb服务 12345678910use admindb.shutdownServer()//强制关闭Mongoddb.shutdownServer(&#123;force : true&#125;) 或db.adminCommand(&#123;shutdown : 1, force : true&#125;)//超时关闭db.adminCommand(shutdown : 1, force : true, timeoutsec : 5)或db.shutdownServer(&#123;force : true, timeoutsec : 5&#125;) 参数解释 1234567891011121314#是否需要验证权限登录(用户名和密码)--auth#从复制检测的时间间隔--slavedelay#指定只复制哪一个数据库--only #指定主机器的IP地址--master#指定为从机器--slave#指定主机器的IP地址--source #指定日志文件大小不超过64M.因为resync是非常操作量大且耗时，最好通过设置一个足够大的oplogSize来避免resync(默认的 oplog大小是空闲磁盘大小的5%)--pologSize 添加管理用户 123# use admin# db.createUser( &#123;user: &quot;admin&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)注：添加完用户后可以使用show users或db.system.users.find()查看已有用户 添加完管理用户后，关闭MongoDB，并使用权限方式再次开启MongoDB，这里注意不要使用kill直接去杀掉mongodb进程，（如果这样做了，请去data/db目录下删除mongo.lock文件），可以使用db.shutdownServer()关闭 使用权限方式启动MongoDBmongod –dbpath=/var/mongodb/data –logpath=/var/mongodb/logs/mongod.log –logappend –auth 或者修改.conf文件 auth = true 进入mongo shell，使用admin数据库并进行验证 123# mongo# use admin# db.auth(&quot;admin&quot;,&quot;123456&quot;) 每个数据库创建用户 12# use mydb# db.createUser(&#123;user: &quot;root&quot;,pwd: &quot;123456&quot;,roles: [&#123; role: &quot;readWrite&quot;, db: &quot;mydb&quot; &#125;]&#125;) 使用创建的用户root登录进行数据库操作mongo 127.0.0.1/mydb -uroot -p 若数据库出现如不能连上，则是一个data目录下的mongod.lock文件的问题，可以用如下的修复的命令 123mongod --repair或rm -f /var/mongodb/data/db/mongod.lock 本地数据导入服务器数据库思路: 将本地的数据库collection导出生成数据文件（json, txt,wps,xls） 把生成的数据文件上传到服务器上 然后在服务器上把数据文件导入服务器数据库 实例: 本地导出ztNet数据库的news集合生成news.json,文件生成目录在:/pc_node/mongoexport/ 12ctrl+r -&gt; cmd -&gt; cd D:/mongo/bin //本地的mongodb安装目录mongoexport -h localhost:27018 -d ztNet -c news -o E:/pc_node/mongoexport/news.json --type json 把news.json上传到服务器目录/testNode/express_test/mongoexport/下 然后把服务器上news.json文件导入test数据库生成集合news 12cd /opt/mongodb/bin //服务器上mongodb的安装目录mongoimport -h 0.0.0.0:27017 -d test -c news --file /testNode/express_test/mongoexport/news.json --type json -h: 数据库地址-d: 指明使用的数据库,如果想导出所有数据库，可以去掉-d-c: 指明要导出的集合-o: 数据文件输出的位置和文件名--type:输出的格式，默认为json-u: 用户-p:密码--port: 默认端口-f :输出的字段，如果-type为csv，则需要加上-f “字段名”file: 要导入的文件--headerline: 如果导入的格式是csv，则可以使用第一行的标题作为导入的字段 MongoDB备份与恢复 MongoDB数据库备份语法： mongodump -h dbhost -d dbname -o dbdirectory-h: MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017-d: 需要备份的数据库数据库-o: 备份的数据存放位置mongodump -h 0.0.0.0:27017 -d test -o /var/mongodb/copydata/ MongoDB数据库恢复语法： mongorestore -h dbhost -d dbname –dir dbdirectory--dir: 备份数据所在位置--drop: 恢复的时候，先删除当前数据，然后恢复备份的数据。恢复后，备份后添加修改的数据都会被删除，慎用！mongorestore -h 0.0.0.0:27017 -d test --dir /var/mongodb/copydata/ MongoDB的基本命令 show dbs: 显示数据库列表 show collections: 显示当前数据库中的集合（类似关系数据库中的表） db.dropDatabase(): 删除当前使用数据库 db.cloneDatabase(“127.0.0.1”):将指定机器上的数据库的数据克隆到当前数据库 db.repairDatabase() :修复当前数据库 db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;): 将本机的mydb的数据复制到temp数据库中 db.getName():查看当前使用的数据库 db.stats():显示当前db状态 db.getMongo():查看当前db的链接机器地址 show users:显示用户 db.removeUser(&quot;userName&quot;): 删除用户 db.auth(&quot;userName&quot;, &quot;123123&quot;): 数据库认证、安全模式 db.addUser(&quot;name&quot;);:添加一个用户 MongoDB运行日志自动分割windows下MongoDB的安装及配置]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>nodeJS</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络基础知识之 HTTP 协议]]></title>
    <url>%2F2018%2F04%2F06%2F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%20HTTP%20%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NodeJS---了解的一些linux知识]]></title>
    <url>%2F2018%2F04%2F05%2FNodeJS---%E4%BA%86%E8%A7%A3%E7%9A%84%E4%B8%80%E4%BA%9Blinux%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[centOS目录结构 /: 根目录,一般根目录下只存放目录,不要存放文件,/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中。 /root: 系统管理员root的家目录,系统第一个启动的分区为/,所以最好将/root和/放置在一个分区下。 /usr: 应用程序存放目录。 /usr/bin存放应用程序,可执行二进制文件的目录和/bin相似/usr/share存放共享数据/usr/lib存放不能直接运行的,却是许多程序运行所必需的一些函数库文件/usr/local存放软件升级包/usr/share/doc系统说明文件存放目录 /var: 放置系统执行过程中经常变化的文件。 /var/log随时更改的日志文件/var/log/message所有的登录文件存放目录/var/spool/mail邮件存放的目录/var/run程序或服务启动 /bin:可执行二进制文件的目录,如常用的命令ls、tar、mv、cat等。 /opt:给主机额外安装软件所摆放的目录。 linux的ln指令详解 命令功能：Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)。 在这里我们解释一下目录项（dentry）的概念。每一个文件一般表示就是使用目录项，每个目录项包含着该文件的名字，该文件指向的inode节点标号，linux把目录和文件都用目录项表示。 硬链接：硬链接可以认为是一个指针，指向原文件inode的指针，系统不为它重新分配inode和创建文件，即硬链接和原文件是同一个文件。其新建一个目录项，指向被链接的inode节点，一个inode节点可以指向多个目录项。软链接：它是指向另一个文件的特殊文件，这种文件的数据部分仅仅包含了它所要连接文件的路径名。软链接同样也是新建一个目录项，指向一个新的inode节点，但这个inode节点的文件数据指针指向所引用文件的真实地址。 注意点：ln命令会保持每一处链接文件的同步性，硬链接会在你选定的位置上生成一个和源文件大小相同的文件，软链接只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间。 ln命令格式：123456ln [参数][源文件或目录][目标文件或目录]ln [源文件或目录][目标文件或目录] ~~~~~~~硬链接ln -s [源文件或目录][目标文件或目录] ~~~~~软链接//创建软链接，使node和npm命令全局有效ln -s /root/node-v8.9.3-linux-x64/bin/node /usr/local/bin/nodeln -s /root/node-v8.9.3-linux-x64/bin/npm /usr/local/bin/npm linux查看和修改PATH环境变量的方法添加mongodb-install-directory的路径为/var/lib/mongodb为环境变量的四种方案 export PATH=&lt;mongodb-install-directory&gt;/bin:$PATH 直接在终端下输入 export PATH=/var/lib/mongodb/bin:$PATH配置完后可以通过echo $PATH查看配置结果生效方法：立即生效有效期限：临时改变，只能在当前的终端窗口中有效，当前窗口关闭后就会恢复原有的path配置用户局限：仅对当前用户 通过修改.bashrc文件: vim ~/.bashrc (推荐)//在最后一行添上：export PATH=export PATH=/var/lib/mongodb/bin:$PATH生效方法：（有以下两种）1、关闭当前终端窗口，重新打开一个新终端窗口就能生效2、输入source ~/.bashrc命令，立即生效有效期限：永久有效用户局限：仅对当前用户 通过修改profile文件: vim /etc/profileexport PATH 找到设置PATH的行，添加export PATH=export PATH=/var/lib/mongodb/bin:$PATH生效方法：系统重启有效期限：永久有效用户局限：对所有用户 通过修改environment文件: vim /etc/environment 1PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;中加入&quot;:/usr/local/mongodb/bin&quot; 生效方法：系统重启有效期限：永久有效用户局限：对所有用户 环境变量的查看与删除 echo $PATH: 查看单个环境变量 env: 查看所有环境变量 set: 查看所有本地定义的环境变量 unset $变量名: 可以删除指定的环境变量 常用的环境变量 PATH 决定了shell将到哪些目录中寻找命令或程序 HOME当前用户主目录 HISTSIZE 历史记录数 LOGNAME 当前用户的登录名 HOSTNAME 指主机的名称 SHELL 当前用户Shell类型 LANGUGE 语言相关的环境变量，多语言可以修改此环境变量 MAIL 当前用户的邮件存放目录 PS1 基本提示符，对于root用户是#，对于普通用户是$ linux命令]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NodeJS---部署阿里云上nodeJS安装]]></title>
    <url>%2F2018%2F04%2F04%2FNodeJS---%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8AnodeJS%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[步骤1: 远程连接服务器 推荐就是辣么好用的 Bitvise SSH Client 步骤2: 安装Node.js使用二进制文件安装 该部署过程使用的安装包是已编译好的二进制文件，解压之后，在bin文件夹中就已存在node和npm，无需手工编译。安装步骤： wget命令下载Node.js安装包wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz wget命令下载Node.js安装包tar xvf node-v8.9.3-linux-x64.tar.xz 创建软链接，使node和npm命令全局有效。通过创建软链接的方法，使得在任意目录下都可以直接使用node和npm命令 12ln -s /root/node-v8.9.3-linux-x64/bin/node /usr/local/bin/nodeln -s /root/node-v8.9.3-linux-x64/bin/npm /usr/local/bin/npm 查看node、npm版本 12node -vnpm -v 至此，Node.js环境已安装完毕。软件默认安装在/root/node-v6.9.5-linux-x64/目录下。如果需要将该软件安装到其他目录（如：/opt/node/）下，请进行如下操作 123456mkdir -p /opt/node/mv /root/node-v8.9.3-linux-x64/* /opt/node/rm -f /usr/local/bin/noderm -f /usr/local/bin/npmln -s /opt/node/bin/node /usr/local/bin/nodeln -s /opt/node/bin/npm /usr/local/bin/npm 步骤3: 部署测试项目 新建一个测试项目文件 123cd ~mkdir -p /testtouch /test/test.js 使用vim编辑器打开项目文件test.js 123yum install vimcd /testvim test.js 输入 i或者使用insert按钮,进入编辑模式（左下角出现-- INSERT --状态）将以下项目文件内容粘贴到test.js中。使用Esc按钮，退出编辑模式（左下角没有任何状态），输入:wq保存文件内容并退出 1234567891011const http = require(&apos;http&apos;);const hostname = &apos;0.0.0.0&apos;;const port = 3000;const server = http.createServer((req, res) =&gt; &#123; res.statusCode = 200; res.setHeader(&apos;Content-Type&apos;, &apos;text/plain&apos;); res.end(&apos;Hello World\n&apos;);&#125;);server.listen(port, hostname, () =&gt; &#123; console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);&#125;); 查看服务器的端口号3.1 netstat -tpln查看项目的port端口号是否存在(如本示例中为TCP 3000端口）3.2 端口号不存在,登录ECS管理控制台，并在安全组中 添加安全组规则 放行端口:登陆阿里云– 控制台（右上角）–云服务器ECS（左边栏）–网络与安全–安全组选择服务器所在的地域–找到要配置授权规则的安全组，在操作列中，单击配置规则点击添加安全组按钮，填写弹框内容，确认。 123*端口范围： 3000/3000授权类型：地址段访问*授权对象：0.0.0.0/0 安装pm2,以node安装路径为/opt/node/为例 12345678910npm install pm2@latest -gln -s /opt/node/bin/pm2 /usr/local/bin/pm2pm2 -v 查看pm2命令pm2 start app.js //运行项目pm2 status //查找项目idpm2 stop id //停止项目pm2 restart id //重启应用pm2 list //查看运行状态pm2 monit //追踪资源运行情况pm2 kill //停止所有项目 运行项目4.1 node test.js 12cd /testnode test.js 4.2 pm2 start test.js 12cd /testpm2 start test.js 访问地址 公网IP:3000 当当当，跑起来了，旋转跳跃，开森开森]]></content>
      <categories>
        <category>nodeJS</category>
      </categories>
      <tags>
        <tag>nodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三月春风似剪刀]]></title>
    <url>%2F2018%2F03%2F11%2F%E4%B8%89%E6%9C%88%E6%98%A5%E9%A3%8E%E4%BC%BC%E5%89%AA%E5%88%80%2F</url>
    <content type="text"><![CDATA[三月，一个拖延症的季节 出门微风拂面，面朝太阳就露出笑脸，我追着光，一直跑]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
