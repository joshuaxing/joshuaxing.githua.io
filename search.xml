<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Express+Mongodb在Centos7.0下运行</title>
      <link href="/2018/04/09/Express+Mongodb%E5%9C%A8Centos7.0%E4%B8%8B%E8%BF%90%E8%A1%8C/"/>
      <content type="html"><![CDATA[<h3 id="VMware14和CentOs7-0的安装"><a href="#VMware14和CentOs7-0的安装" class="headerlink" title="VMware14和CentOs7.0的安装"></a>VMware14和CentOs7.0的安装</h3><p><a href="http://www.cnblogs.com/lynn-li/p/6077944.html" target="_blank" rel="noopener">参考</a></p><ol><li>服务器安装配置了解知识<br><code>yum</code>:是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器<br><code>yum install</code>: 安装rpm软件包<br><code>yum remove</code>: 删除指定的rpm软件包<br><code>yum list</code>: 显示软件包的信息<br><code>yum search</code>: 检查软件包的信息</li><li>安装ifconfig命令<br><code>yum install net-tools.x86_64</code></li><li>安装包命令<br><code>yum install XXX</code></li><li>关闭防火墙<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class="line">init 6  #重启虚拟机，然后再输入第一条命令查看防火墙状态</span><br></pre></td></tr></table></figure></li></ol><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ol><li><a href="https://juejin.im/post/5a050d7f51882578d84eeaf8" target="_blank" rel="noopener">Nginx文档翻译</a></li><li><a href="https://juejin.im/entry/58354604d20309005fe2c419" target="_blank" rel="noopener">Nginx 配置简述</a></li><li><a href="https://juejin.im/entry/585c9f9e1b69e600560c9003" target="_blank" rel="noopener">Nginx基础</a></li><li><p>使用nginx配置nodejs服务进行反向代理<br>修改nginx.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">upstream sample &#123;  </span><br><span class="line">    server 127.0.0.1:3000;  </span><br><span class="line">    keepalive 64;  </span><br><span class="line">&#125;  </span><br><span class="line">server &#123;  </span><br><span class="line">  listen 80;  </span><br><span class="line">  ....  </span><br><span class="line">  server_name 127.0.0.1;  </span><br><span class="line">  ....  </span><br><span class="line">  location / &#123;  </span><br><span class="line">    proxy_redirect off;  </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;  </span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;  </span><br><span class="line">    proxy_set_header Host $http_host;  </span><br><span class="line">    proxy_set_header X-NginX-Proxy true;  </span><br><span class="line">    proxy_set_header Connection &quot;&quot;;  </span><br><span class="line">    proxy_http_version 1.1;  </span><br><span class="line">    proxy_pass http://sample;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nginx -s reload</code>重启</p></li></ol>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nodeJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NodeJS---mongodb的安装</title>
      <link href="/2018/04/07/NodeJS---mongodb%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <content type="html"><![CDATA[<h3 id="Linux下安装MongoDB的实现步骤"><a href="#Linux下安装MongoDB的实现步骤" class="headerlink" title="Linux下安装MongoDB的实现步骤"></a>Linux下安装MongoDB的实现步骤</h3><h4 id="安装配置mongodb"><a href="#安装配置mongodb" class="headerlink" title="安装配置mongodb"></a>安装配置mongodb</h4><blockquote><p><code>/opt/mongodb/</code>  mongodb安装位置<br>  <code>/opt/mongodb/bin</code>  mongodb命令目录<br>  <code>/var/mongodb/data</code> 数据存放目录<br>  <code>/var/mongodb/logs/mongod.log</code> 日志存放目录及文件<br>  <code>/var/mongodb/mongodb.conf</code> mongodb启动配置文件</p></blockquote><ol><li>wget命令下载Node.js安装包<br><code>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.5.tgz</code></li><li><p>解压文件,并移动mongodb安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mongodb-linux-x86_64-3.4.5.tgz</span><br><span class="line">mv /root/mongodb-linux-x86_64-3.4.5/* /opt/mongodb/</span><br></pre></td></tr></table></figure></li><li><p>创建数据和日志存放目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/mongodb</span><br><span class="line">mkdir /var/mongodb/data</span><br><span class="line">mkdir /var/mongodb/logs</span><br><span class="line">touch /var/mongodb/logs/mongod.log</span><br><span class="line">touch /var/mongodb/mongodb.conf</span><br></pre></td></tr></table></figure></li><li><p>打开rc.local文件，添加CentOS开机启动项,让mongodb开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/rc.d/rc.local</span><br><span class="line">/opt/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath=/var/mongodb/logs/mongod.log --fork --logappend</span><br></pre></td></tr></table></figure></li><li><p>设置mongodb命令的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#vi ~/.bash_profile //进入编辑</span><br><span class="line">export PATH=/opt/mongodb/bin:$PATH //文件添加内容</span><br><span class="line">#source ~/.bash_profile //文件生成</span><br></pre></td></tr></table></figure></li></ol><h4 id="mongodb的启动"><a href="#mongodb的启动" class="headerlink" title="mongodb的启动"></a>mongodb的启动</h4><blockquote><p>mongodb启动时，如果没有设置环境变量，则用./mongod</p></blockquote><ol><li><p>参数启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/mongodb/bin</span><br><span class="line">mongod --dbpath=/var/mongodb/data --logpath= /var/mongodb/logs/mongod.log --logappend</span><br></pre></td></tr></table></figure></li><li><p>使用配置文件启动（/var/mongodb/mongodb.conf）<br>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#启用日志文件，默认启用</span><br><span class="line">journal = true</span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">quiet = false</span><br><span class="line">#日志文件位置</span><br><span class="line">logpath=/var/mongodb/logs/mongod.log</span><br><span class="line">#以追加方式写入日志</span><br><span class="line">logappend=true</span><br><span class="line">#是否以守护进程方式运行</span><br><span class="line">fork = false</span><br><span class="line">#默认27017</span><br><span class="line">port = 27017</span><br><span class="line"># 数据库文件位置</span><br><span class="line">dbpath = /var/mongodb/data/</span><br><span class="line">#启用定期记录CPU利用率和 I/O 等待</span><br><span class="line">cpu = true</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/mongodb/bin</span><br><span class="line">mongod --config /var/mongodb/mongodb.conf</span><br></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/wlzx120/article/details/52311769" target="_blank" rel="noopener">系统服务启动</a><br><a href="https://blog.csdn.net/a123demi/article/details/70238972" target="_blank" rel="noopener">参考</a></p></li><li><p>配置防火墙开放端口27017</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/sysconfig/iptables </span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 27017 -j ACCEPT  </span><br><span class="line">#  service iptables restart</span><br></pre></td></tr></table></figure></li><li><p>检查端口是否已被启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -pan | grep 27017</span><br><span class="line">或</span><br><span class="line">netstat -nputl</span><br></pre></td></tr></table></figure><p><code>netstat</code>: 打印Linux中网络系统的状态信息<br><code>-n(numeric)</code>: 直接使用ip地址<br><code>-p(programs)</code>: 显示正在使用Socket的程序识别码和程序名称<br><code>-u(udp)</code>: 显示UDP传输协议的连线状况<br><code>-t(tcp)</code>: 显示TCP传输协议的连线状况<br><code>-l(listening)</code>: 显示监控中的服务器的Socket<br><code>-a(all)</code>:显示所有连线中的Socket<br><code>grep</code>: 强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p></li><li>查看mongodb进程<br><code>ps aux | grep mongodb</code><br><code>ps</code>: 用于报告当前系统的进程状态<br><code>a</code>: 显示现行终端机下的所有程序，包括其他用户的程序<br><code>u</code>: 以用户为主的格式来显示程序状况<br><code>x</code>: 显示所有程序，不以终端机来区分</li><li><p>关闭mongodb服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.shutdownServer()</span><br><span class="line">//强制关闭Mongod</span><br><span class="line">db.shutdownServer(&#123;force : true&#125;) </span><br><span class="line">或</span><br><span class="line">db.adminCommand(&#123;shutdown : 1, force : true&#125;)</span><br><span class="line">//超时关闭</span><br><span class="line">db.adminCommand(shutdown : 1, force : true, timeoutsec : 5)</span><br><span class="line">或</span><br><span class="line">db.shutdownServer(&#123;force : true, timeoutsec : 5&#125;)</span><br></pre></td></tr></table></figure></li><li><p>参数解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#是否需要验证权限登录(用户名和密码)</span><br><span class="line">--auth</span><br><span class="line">#从复制检测的时间间隔</span><br><span class="line">--slavedelay</span><br><span class="line">#指定只复制哪一个数据库</span><br><span class="line">--only </span><br><span class="line">#指定主机器的IP地址</span><br><span class="line">--master</span><br><span class="line">#指定为从机器</span><br><span class="line">--slave</span><br><span class="line">#指定主机器的IP地址</span><br><span class="line">--source </span><br><span class="line">#指定日志文件大小不超过64M.因为resync是非常操作量大且耗时，最好通过设置一个足够大的oplogSize来避免resync(默认的 oplog大小是空闲磁盘大小的5%)</span><br><span class="line">--pologSize</span><br></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/wlzx120/article/details/52301799" target="_blank" rel="noopener">添加管理用户</a></p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># use admin</span><br><span class="line"># db.createUser( &#123;user: &quot;admin&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br><span class="line">注：添加完用户后可以使用show users或db.system.users.find()查看已有用户</span><br></pre></td></tr></table></figure></li><li><p>添加完管理用户后，关闭MongoDB，并使用权限方式再次开启MongoDB，这里注意不要使用kill直接去杀掉mongodb进程，（如果这样做了，请去data/db目录下删除mongo.lock文件），可以使用db.shutdownServer()关闭</p></li><li>使用权限方式启动MongoDB<br>mongod –dbpath=/var/mongodb/data –logpath=/var/mongodb/logs/mongod.log –logappend –auth 或者修改.conf文件 auth = true</li><li><p>进入mongo shell，使用admin数据库并进行验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongo</span><br><span class="line"># use admin</span><br><span class="line"># db.auth(&quot;admin&quot;,&quot;123456&quot;)</span><br></pre></td></tr></table></figure></li><li><p>每个数据库创建用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># use mydb</span><br><span class="line"># db.createUser(&#123;user: &quot;root&quot;,pwd: &quot;123456&quot;,roles: [&#123; role: &quot;readWrite&quot;, db: &quot;mydb&quot; &#125;]&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用创建的用户root登录进行数据库操作<br><code>mongo 127.0.0.1/mydb -uroot -p</code></p></li></ol></li><li><blockquote><p>若数据库出现如不能连上，则是一个data目录下的mongod.lock文件的问题，可以用如下的修复的命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod --repair</span><br><span class="line">或</span><br><span class="line">rm -f /var/mongodb/data/db/mongod.lock</span><br></pre></td></tr></table></figure></li></ol><h4 id="本地数据导入服务器数据库"><a href="#本地数据导入服务器数据库" class="headerlink" title="本地数据导入服务器数据库"></a>本地数据导入服务器数据库</h4><p>思路:</p><ol><li>将本地的数据库collection导出生成数据文件（json, txt,wps,xls）</li><li>把生成的数据文件上传到服务器上</li><li>然后在服务器上把数据文件导入服务器数据库</li></ol><p>实例:</p><ol><li><p>本地导出ztNet数据库的news集合生成news.json,文件生成目录在:/pc_node/mongoexport/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl+r -&gt; cmd -&gt; cd D:/mongo/bin //本地的mongodb安装目录</span><br><span class="line">mongoexport -h localhost:27018 -d ztNet -c news -o E:/pc_node/mongoexport/news.json --type json</span><br></pre></td></tr></table></figure></li><li><p>把news.json上传到服务器目录/testNode/express_test/mongoexport/下</p></li><li><p>然后把服务器上news.json文件导入test数据库生成集合news</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/mongodb/bin //服务器上mongodb的安装目录</span><br><span class="line">mongoimport -h 0.0.0.0:27017 -d test -c news --file /testNode/express_test/mongoexport/news.json --type json</span><br></pre></td></tr></table></figure><p><code>-h</code>: 数据库地址<br><code>-d</code>: 指明使用的数据库,如果想导出所有数据库，可以去掉-d<br><code>-c</code>: 指明要导出的集合<br><code>-o</code>: 数据文件输出的位置和文件名<br><code>--type</code>:输出的格式，默认为json<br><code>-u</code>: 用户<br><code>-p</code>:密码<br><code>--port</code>: 默认端口<br><code>-f</code> :输出的字段，如果-type为csv，则需要加上-f “字段名”<br><code>file</code>: 要导入的文件<br><code>--headerline</code>: 如果导入的格式是csv，则可以使用第一行的标题作为导入的字段</p></li></ol><h4 id="MongoDB备份与恢复"><a href="#MongoDB备份与恢复" class="headerlink" title="MongoDB备份与恢复"></a>MongoDB备份与恢复</h4><ol><li>MongoDB数据库备份<br>语法： mongodump -h dbhost -d dbname -o dbdirectory<br><code>-h</code>: MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017<br><code>-d</code>: 需要备份的数据库数据库<br><code>-o</code>:  备份的数据存放位置<br><code>mongodump -h 0.0.0.0:27017 -d test -o /var/mongodb/copydata/</code></li><li>MongoDB数据库恢复<br>语法： mongorestore -h dbhost -d dbname –dir dbdirectory<br><code>--dir</code>: 备份数据所在位置<br><code>--drop</code>: 恢复的时候，先删除当前数据，然后恢复备份的数据。恢复后，备份后添加修改的数据都会被删除，慎用！<br><code>mongorestore -h 0.0.0.0:27017 -d test --dir /var/mongodb/copydata/</code></li></ol><h4 id="MongoDB的基本命令"><a href="#MongoDB的基本命令" class="headerlink" title="MongoDB的基本命令"></a>MongoDB的基本命令</h4><p>  <code>show dbs</code>: 显示数据库列表<br>  <code>show collections</code>: 显示当前数据库中的集合（类似关系数据库中的表）<br>  <code>db.dropDatabase()</code>: 删除当前使用数据库<br>  <code>db.cloneDatabase(“127.0.0.1”)</code>:将指定机器上的数据库的数据克隆到当前数据库<br>  <code>db.repairDatabase()</code> :修复当前数据库<br>  <code>db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;)</code>: 将本机的mydb的数据复制到temp数据库中<br>  <code>db.getName()</code>:查看当前使用的数据库<br>  <code>db.stats()</code>:显示当前db状态<br>  <code>db.getMongo()</code>:查看当前db的链接机器地址<br>  <code>show users</code>:显示用户<br>  <code>db.removeUser(&quot;userName&quot;)</code>: 删除用户<br>  <code>db.auth(&quot;userName&quot;, &quot;123123&quot;)</code>: 数据库认证、安全模式<br>  <code>db.addUser(&quot;name&quot;);</code>:添加一个用户</p><h4 id="MongoDB运行日志自动分割"><a href="#MongoDB运行日志自动分割" class="headerlink" title="MongoDB运行日志自动分割"></a><a href="https://blog.csdn.net/wangkai_123456/article/details/53705592" target="_blank" rel="noopener">MongoDB运行日志自动分割</a></h4><h3 id="windows下MongoDB的安装及配置"><a href="#windows下MongoDB的安装及配置" class="headerlink" title="windows下MongoDB的安装及配置"></a><a href="https://jingyan.baidu.com/article/d5c4b52bef7268da560dc5f8.html" target="_blank" rel="noopener">windows下MongoDB的安装及配置</a></h3>]]></content>
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJS </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络基础知识之 HTTP 协议</title>
      <link href="/2018/04/06/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%20HTTP%20%E5%8D%8F%E8%AE%AE/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NodeJS---了解的一些linux知识</title>
      <link href="/2018/04/05/NodeJS---%E4%BA%86%E8%A7%A3%E7%9A%84%E4%B8%80%E4%BA%9Blinux%E7%9F%A5%E8%AF%86/"/>
      <content type="html"><![CDATA[<h3 id="centOS目录结构"><a href="#centOS目录结构" class="headerlink" title="centOS目录结构"></a><a href="https://www.aliyun.com/jiaocheng/162547.html" target="_blank" rel="noopener">centOS目录结构</a></h3><ol><li><code>/</code>: 根目录,一般根目录下只存放目录,不要存放文件,/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中。</li><li><code>/root</code>: 系统管理员root的家目录,系统第一个启动的分区为/,所以最好将/root和/放置在一个分区下。</li><li><code>/usr</code>: 应用程序存放目录。<blockquote><p><code>/usr/bin</code>存放应用程序,可执行二进制文件的目录和/bin相似<br><code>/usr/share</code>存放共享数据<br><code>/usr/lib</code>存放不能直接运行的,却是许多程序运行所必需的一些函数库文件<br><code>/usr/local</code>存放软件升级包<br><code>/usr/share/doc</code>系统说明文件存放目录</p></blockquote></li><li><code>/var</code>: 放置系统执行过程中经常变化的文件。<blockquote><p><code>/var/log</code>随时更改的日志文件<br><code>/var/log/message</code>所有的登录文件存放目录<br><code>/var/spool/mail</code>邮件存放的目录<br><code>/var/run</code>程序或服务启动</p></blockquote></li><li><code>/bin</code>:可执行二进制文件的目录,如常用的命令ls、tar、mv、cat等。</li><li><code>/opt</code>:给主机额外安装软件所摆放的目录。</li></ol><h3 id="linux的ln指令详解"><a href="#linux的ln指令详解" class="headerlink" title="linux的ln指令详解"></a>linux的ln指令详解</h3><ol><li><p>命令功能：<br>Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)。</p><p>在这里我们解释一下目录项（dentry）的概念。每一个文件一般表示就是使用目录项，每个目录项包含着该文件的名字，该文件指向的inode节点标号，linux把目录和文件都用目录项表示。</p><blockquote><p><code>硬链接</code>：硬链接可以认为是一个指针，指向原文件inode的指针，系统不为它重新分配inode和创建文件，即硬链接和原文件是同一个文件。其新建一个目录项，指向被链接的inode节点，一个inode节点可以指向多个目录项。<br><code>软链接</code>：它是指向另一个文件的特殊文件，这种文件的数据部分仅仅包含了它所要连接文件的路径名。软链接同样也是新建一个目录项，指向一个新的inode节点，但这个inode节点的文件数据指针指向所引用文件的真实地址。</p></blockquote><p>注意点：ln命令会保持每一处链接文件的同步性，硬链接会在你选定的位置上生成一个和源文件大小相同的文件，软链接只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间。</p></li><li>ln命令格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ln [参数][源文件或目录][目标文件或目录]</span><br><span class="line">ln  [源文件或目录][目标文件或目录] ~~~~~~~硬链接</span><br><span class="line">ln -s [源文件或目录][目标文件或目录] ~~~~~软链接</span><br><span class="line">//创建软链接，使node和npm命令全局有效</span><br><span class="line">ln -s /root/node-v8.9.3-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /root/node-v8.9.3-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></li></ol><h3 id="linux查看和修改PATH环境变量的方法"><a href="#linux查看和修改PATH环境变量的方法" class="headerlink" title="linux查看和修改PATH环境变量的方法"></a><a href="http://www.haorooms.com/post/linux_path_commond" target="_blank" rel="noopener">linux查看和修改PATH环境变量的方法</a></h3><h4 id="添加mongodb-install-directory的路径为-var-lib-mongodb为环境变量的四种方案"><a href="#添加mongodb-install-directory的路径为-var-lib-mongodb为环境变量的四种方案" class="headerlink" title="添加mongodb-install-directory的路径为/var/lib/mongodb为环境变量的四种方案"></a>添加mongodb-install-directory的路径为/var/lib/mongodb为环境变量的四种方案</h4><p>  <code>export PATH=&lt;mongodb-install-directory&gt;/bin:$PATH</code></p><ol><li>直接在终端下输入 <code>export PATH=/var/lib/mongodb/bin:$PATH</code><br>配置完后可以通过<code>echo $PATH</code>查看配置结果<br>生效方法：立即生效<br>有效期限：临时改变，只能在当前的终端窗口中有效，当前窗口关闭后就会恢复原有的path配置<br>用户局限：仅对当前用户</li><li>通过修改.bashrc文件: <code>vim ~/.bashrc</code> (推荐)<br>//在最后一行添上：<br><code>export PATH=export PATH=/var/lib/mongodb/bin:$PATH</code><br>生效方法：（有以下两种）<br>1、关闭当前终端窗口，重新打开一个新终端窗口就能生效<br>2、输入<code>source ~/.bashrc</code>命令，立即生效<br>有效期限：永久有效<br>用户局限：仅对当前用户</li><li>通过修改profile文件: <code>vim /etc/profile</code><br>export PATH 找到设置PATH的行，添加<br><code>export PATH=export PATH=/var/lib/mongodb/bin:$PATH</code><br>生效方法：系统重启<br>有效期限：永久有效<br>用户局限：对所有用户</li><li><p>通过修改environment文件: <code>vim /etc/environment</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;中加入&quot;:/usr/local/mongodb/bin&quot;</span><br></pre></td></tr></table></figure><p>生效方法：系统重启<br>有效期限：永久有效<br>用户局限：对所有用户</p></li></ol><h4 id="环境变量的查看与删除"><a href="#环境变量的查看与删除" class="headerlink" title="环境变量的查看与删除"></a>环境变量的查看与删除</h4><blockquote><p><code>echo $PATH</code>: 查看单个环境变量<br>   <code>env</code>: 查看所有环境变量<br>   <code>set</code>: 查看所有本地定义的环境变量<br>   <code>unset $变量名</code>: 可以删除指定的环境变量</p></blockquote><h4 id="常用的环境变量"><a href="#常用的环境变量" class="headerlink" title="常用的环境变量"></a>常用的环境变量</h4><blockquote><p><code>PATH</code> 决定了shell将到哪些目录中寻找命令或程序<br>  <code>HOME</code>当前用户主目录<br>  <code>HISTSIZE</code>　历史记录数<br>  <code>LOGNAME</code> 当前用户的登录名<br>  <code>HOSTNAME</code>　指主机的名称<br>  <code>SHELL</code> 当前用户Shell类型<br>  <code>LANGUGE</code> 　语言相关的环境变量，多语言可以修改此环境变量<br>  <code>MAIL</code>　当前用户的邮件存放目录<br>  <code>PS1</code>　基本提示符，对于root用户是#，对于普通用户是$</p></blockquote><h3 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a><a href="http://man.linuxde.net/sub/%E7%9B%AE%E5%BD%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener">linux命令</a></h3>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nodeJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NodeJS---部署阿里云上nodeJS安装</title>
      <link href="/2018/04/04/NodeJS---%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8AnodeJS%E5%AE%89%E8%A3%85/"/>
      <content type="html"><![CDATA[<h3 id="步骤1-远程连接服务器"><a href="#步骤1-远程连接服务器" class="headerlink" title="步骤1: 远程连接服务器"></a>步骤1: 远程连接服务器</h3><p>  推荐就是辣么好用的 Bitvise SSH Client</p><h3 id="步骤2-安装Node-js"><a href="#步骤2-安装Node-js" class="headerlink" title="步骤2: 安装Node.js"></a>步骤2: 安装Node.js</h3><h4 id="使用二进制文件安装"><a href="#使用二进制文件安装" class="headerlink" title="使用二进制文件安装"></a>使用二进制文件安装</h4><p>  该部署过程使用的安装包是已编译好的二进制文件，解压之后，在bin文件夹中就已存在node和npm，无需手工编译。<br>安装步骤：</p><ol><li>wget命令下载Node.js安装包<br><code>wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz</code></li><li>wget命令下载Node.js安装包<br><code>tar xvf node-v8.9.3-linux-x64.tar.xz</code></li><li><p>创建<a href="http://xshaohua.cc/2018/04/05/NodeJS---了解的一些linux知识/" target="_blank" rel="noopener">软链接</a>，使node和npm命令全局有效。通过创建软链接的方法，使得在任意目录下都可以直接使用node和npm命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/node-v8.9.3-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /root/node-v8.9.3-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></li><li><p>查看node、npm版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>至此，Node.js环境已安装完毕。软件默认安装在/root/node-v6.9.5-linux-x64/目录下。如果需要将该软件安装到其他目录（如：/opt/node/）下，请进行如下操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/node/</span><br><span class="line">mv /root/node-v8.9.3-linux-x64/* /opt/node/</span><br><span class="line">rm -f /usr/local/bin/node</span><br><span class="line">rm -f /usr/local/bin/npm</span><br><span class="line">ln -s /opt/node/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /opt/node/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></li></ol><h3 id="步骤3-部署测试项目"><a href="#步骤3-部署测试项目" class="headerlink" title="步骤3: 部署测试项目"></a>步骤3: 部署测试项目</h3><ol><li><p>新建一个测试项目文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir -p /test</span><br><span class="line">touch /test/test.js</span><br></pre></td></tr></table></figure></li><li><p>使用vim编辑器打开项目文件test.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br><span class="line">cd /test</span><br><span class="line">vim test.js</span><br></pre></td></tr></table></figure><p>输入 <code>i</code>或者使用<code>insert</code>按钮,进入编辑模式（左下角出现<code>-- INSERT --</code>状态）将以下项目文件内容粘贴到test.js中。使用<code>Esc</code>按钮，退出编辑模式（左下角没有任何状态），输入<code>:wq</code>保存文件内容并退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">const hostname = &apos;0.0.0.0&apos;;</span><br><span class="line">const port = 3000;</span><br><span class="line">const server = http.createServer((req, res) =&gt; &#123;</span><br><span class="line">  res.statusCode = 200;</span><br><span class="line">  res.setHeader(&apos;Content-Type&apos;, &apos;text/plain&apos;);</span><br><span class="line">  res.end(&apos;Hello World\n&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(port, hostname, () =&gt; &#123;</span><br><span class="line">  console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查看服务器的端口号<br>3.1 <code>netstat -tpln</code>查看项目的<code>port</code>端口号是否存在(如本示例中为TCP 3000端口）<br>3.2 端口号不存在,<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fecs.console.aliyun.com%2F%3Fspm%3Da2c4g.11186623.2.8.k3045e#/home" target="_blank" rel="noopener">登录ECS管理控制台</a>，并在安全组中 <a href="https://help.aliyun.com/document_detail/25471.html?spm=a2c4g.11186623.2.9.osiVs4" target="_blank" rel="noopener">添加安全组规则</a> 放行端口:<br><code>登陆阿里云</code>– <code>控制台（右上角）</code>–<code>云服务器ECS（左边栏）</code>–<code>网络与安全</code>–<code>安全组</code><br>选择服务器所在的<code>地域</code>–找到要配置授权规则的<code>安全组</code>，在<code>操作</code>列中，单击<code>配置规则</code><br>点击<code>添加安全组</code>按钮，填写弹框内容，确认。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*端口范围： 3000/3000</span><br><span class="line">授权类型：地址段访问</span><br><span class="line">*授权对象：0.0.0.0/0</span><br></pre></td></tr></table></figure></li><li><p>安装pm2,以node安装路径为/opt/node/为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g</span><br><span class="line">ln -s /opt/node/bin/pm2 /usr/local/bin/pm2</span><br><span class="line">pm2 -v 查看pm2命令</span><br><span class="line">pm2 start app.js //运行项目</span><br><span class="line">pm2 status //查找项目id</span><br><span class="line">pm2 stop id //停止项目</span><br><span class="line">pm2 restart id //重启应用</span><br><span class="line">pm2 list //查看运行状态</span><br><span class="line">pm2 monit //追踪资源运行情况</span><br><span class="line">pm2 kill //停止所有项目</span><br></pre></td></tr></table></figure></li><li><p>运行项目<br>4.1 <code>node test.js</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /test</span><br><span class="line">node test.js</span><br></pre></td></tr></table></figure><p>4.2 <code>pm2 start test.js</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /test</span><br><span class="line">pm2 start test.js</span><br></pre></td></tr></table></figure></li><li><p>访问地址 公网IP:3000 </p></li></ol><h2 id="当当当，跑起来了，旋转跳跃，开森开森"><a href="#当当当，跑起来了，旋转跳跃，开森开森" class="headerlink" title="当当当，跑起来了，旋转跳跃，开森开森"></a>当当当，跑起来了，旋转跳跃，开森开森</h2>]]></content>
      
      <categories>
          
          <category> nodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三月春风似剪刀</title>
      <link href="/2018/03/11/%E4%B8%89%E6%9C%88%E6%98%A5%E9%A3%8E%E4%BC%BC%E5%89%AA%E5%88%80/"/>
      <content type="html"><![CDATA[<h2 id="三月，一个拖延症的季节"><a href="#三月，一个拖延症的季节" class="headerlink" title="三月，一个拖延症的季节"></a>三月，一个拖延症的季节</h2><p>  出门微风拂面，面朝太阳就露出笑脸，我追着光，一直跑</p>]]></content>
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/05/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
